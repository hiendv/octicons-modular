// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rollup tree-shaking works 1`] = `
"var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		Object.keys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	Object.keys(source).forEach(function(key) {
		if (!options.isMergeableObject(source[key]) || !target[key]) {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		} else {
			destination[key] = deepmerge(target[key], source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

function octicon (name, width, height, path, keywords) {
  var attributes = function (opts) {
    var options = deepmerge_1({
      scale: 1,
      label: null,
      class: null
    }, opts || {});

    var attrs = elementAttributes({
      version: '1.1',
      width: width,
      height: height,
      viewBox: (\\"0 0 \\" + width + \\" \\" + height)
    }, options);

    return elementAttributesString(attrs)
  };

  var elementAttributes = function (attrs, options) {
    if (options.label) {
      attrs['aria-label'] = options.label;
    } else {
      attrs['aria-hidden'] = true;
    }

    if (options.class) {
      attrs['class'] = \\"octicon octicon-\\" + name + \\" \\" + (options.class);
    } else {
      attrs['class'] = \\"octicon octicon-\\" + name;
    }

    var actualScale = options.scale === 0 ? 0 : parseFloat(options.scale) || 1;
    var actualWidth = actualScale * parseInt(attrs['width']);
    var actualHeight = actualScale * parseInt(attrs['height']);

    attrs['width'] = Number(actualWidth.toFixed(2));
    attrs['height'] = Number(actualHeight.toFixed(2));

    return attrs
  };

  var elementAttributesString = function (attrs) {
    return Object.keys(attrs).map(function (name) {
      return (name + \\"=\\\\\\"\\" + (attrs[name]) + \\"\\\\\\"\\")
    }).join(' ').trim()
  };

  return {
    name: name,
    data: {
      width: width,
      height: height,
      path: path,
      keywords: keywords
    },
    svg: function svg (options, doc) {
      if ( doc === void 0 ) doc = document;

      var wrapper = doc.createElement('div');
      wrapper.innerHTML = \\"<svg \\" + (attributes(options)) + \\">\\" + path + \\"</svg>\\";
      return wrapper.firstChild
    }
  }
}

// This is an auto-generated ES2015 icon from the modularize script. Please do not modify this file.
var alert = octicon('alert', 16, 16, \\"<path fill-rule=\\\\\\"evenodd\\\\\\" d=\\\\\\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\\\\\\"></path>\\", [\\"warning\\",\\"triangle\\",\\"exclamation\\",\\"point\\"]);

/* eslint-disable */
console.log(alert.svg());
// the zap icon is removed since it's unused
"
`;
