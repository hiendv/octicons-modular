// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Rollup tree-shaking works 1`] = `
"const getAttrs = element => {
  return Array.from(element.attributes).reduce((o, item) => {
    o[item.name] = item.value;
    return o
  }, {})
};

var Octicon = {
  functional: true,
  props: {
    icon: {
      type: Object,
      required: true,
      validator (value) {
        return value.svg instanceof Function
      }
    },
    scale: {
      type: Number,
      default: 1
    },
    className: {
      type: String,
      default: null
    },
    label: {
      type: String,
      default: null
    }
  },
  render (createElement, { props }) {
    let { icon, scale, className, label } = props;
    let octicon = icon.svg({ scale, class: className, label });
    if (!octicon) {
      return
    }

    let attrs = getAttrs(octicon);
    let innerHTML = octicon.innerHTML;

    return createElement(
      octicon.tagName,
      {
        attrs,
        domProps: {
          innerHTML
        }
      }
    )
  }
};

function octicon (name, data) {
  const { width, height, path } = data;

  const attributes = opts => {
    let options = Object.assign({}, {
      scale: 1,
      label: null,
      class: null
    }, opts);

    let attrs = elementAttributes({
      version: '1.1',
      width,
      height,
      viewBox: \`0 0 \${width} \${height}\`
    }, options);

    return elementAttributesString(attrs)
  };

  const elementAttributes = (attrs, options) => {
    if (options.label) {
      attrs['aria-label'] = options.label;
    } else {
      attrs['aria-hidden'] = true;
    }

    if (options.class) {
      attrs['class'] = \`octicon octicon-\${name} \${options.class}\`;
    } else {
      attrs['class'] = \`octicon octicon-\${name}\`;
    }

    let actualScale = options.scale === 0 ? 0 : parseFloat(options.scale) || 1;
    let actualWidth = actualScale * parseInt(attrs['width']);
    let actualHeight = actualScale * parseInt(attrs['height']);

    attrs['width'] = Number(actualWidth.toFixed(2));
    attrs['height'] = Number(actualHeight.toFixed(2));

    return attrs
  };

  const elementAttributesString = attrs => {
    return Object.keys(attrs).map(name => {
      return \`\${name}=\\"\${attrs[name]}\\"\`
    }).join(' ').trim()
  };

  return {
    name,
    data,
    svg (options, doc = document) {
      let wrapper = doc.createElement('div');
      wrapper.innerHTML = \`<svg \${attributes(options)}>\${path}</svg>\`;
      return wrapper.firstChild
    }
  }
}

// This is an auto-generated ES2015 icon from the modularize script. Please do not modify this file.
var alert = octicon('alert', {\\"keywords\\":[\\"warning\\",\\"triangle\\",\\"exclamation\\",\\"point\\"],\\"path\\":\\"<path fill-rule=\\\\\\"evenodd\\\\\\" d=\\\\\\"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z\\\\\\"></path>\\",\\"width\\":16,\\"height\\":16});

function styleInject(css, ref) {
  if ( ref === void 0 ) ref = {};
  var insertAt = ref.insertAt;

  if (!css || typeof document === 'undefined') { return; }

  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';

  if (insertAt === 'top') {
    if (head.firstChild) {
      head.insertBefore(style, head.firstChild);
    } else {
      head.appendChild(style);
    }
  } else {
    head.appendChild(style);
  }

  if (style.styleSheet) {
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
}

var css = \\".octicon{display:inline-block;vertical-align:text-top;fill:currentColor}\\";
styleInject(css);

/* eslint-disable */
console.log(Octicon, alert.svg());
// the zap icon is removed since it's unused
"
`;
